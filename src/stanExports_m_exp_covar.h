// Generated by rstantools.  Do not edit by hand.

/*
    BPrinStratTTE is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BPrinStratTTE is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BPrinStratTTE.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_m_exp_covar_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_m_exp_covar");
    reader.add_event(116, 114, "end", "model_m_exp_covar");
    return reader;
}
#include <stan_meta_header.hpp>
class model_m_exp_covar
  : public stan::model::model_base_crtp<model_m_exp_covar> {
private:
        int n;
        int nt;
        int p;
        int tg;
        std::vector<int> Z;
        std::vector<int> S;
        std::vector<int> S_trt;
        std::vector<double> TIME;
        std::vector<int> EVENT;
        matrix_d X;
        matrix_d X_trt;
        matrix_d prior_delta;
        std::vector<double> prior_0N;
        std::vector<double> prior_1N;
        std::vector<double> prior_0T;
        std::vector<double> prior_1T;
        vector_d t_grid;
public:
    model_m_exp_covar(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_m_exp_covar(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_m_exp_covar_namespace::model_m_exp_covar";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 1);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "nt", "int", context__.to_vec());
            nt = int(0);
            vals_i__ = context__.vals_i("nt");
            pos__ = 0;
            nt = vals_i__[pos__++];
            check_greater_or_equal(function__, "nt", nt, 1);
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "p", "int", context__.to_vec());
            p = int(0);
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            p = vals_i__[pos__++];
            check_greater_or_equal(function__, "p", p, 1);
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "tg", "int", context__.to_vec());
            tg = int(0);
            vals_i__ = context__.vals_i("tg");
            pos__ = 0;
            tg = vals_i__[pos__++];
            check_greater_or_equal(function__, "tg", tg, 1);
            current_statement_begin__ = 10;
            validate_non_negative_index("Z", "n", n);
            context__.validate_dims("data initialization", "Z", "int", context__.to_vec(n));
            Z = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("Z");
            pos__ = 0;
            size_t Z_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < Z_k_0_max__; ++k_0__) {
                Z[k_0__] = vals_i__[pos__++];
            }
            size_t Z_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < Z_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Z[i_0__]", Z[i_0__], 0);
                check_less_or_equal(function__, "Z[i_0__]", Z[i_0__], 1);
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("S", "n", n);
            context__.validate_dims("data initialization", "S", "int", context__.to_vec(n));
            S = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            size_t S_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < S_k_0_max__; ++k_0__) {
                S[k_0__] = vals_i__[pos__++];
            }
            size_t S_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < S_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "S[i_0__]", S[i_0__], 0);
                check_less_or_equal(function__, "S[i_0__]", S[i_0__], 1);
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("S_trt", "nt", nt);
            context__.validate_dims("data initialization", "S_trt", "int", context__.to_vec(nt));
            S_trt = std::vector<int>(nt, int(0));
            vals_i__ = context__.vals_i("S_trt");
            pos__ = 0;
            size_t S_trt_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < S_trt_k_0_max__; ++k_0__) {
                S_trt[k_0__] = vals_i__[pos__++];
            }
            size_t S_trt_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < S_trt_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "S_trt[i_0__]", S_trt[i_0__], 0);
                check_less_or_equal(function__, "S_trt[i_0__]", S_trt[i_0__], 1);
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("TIME", "n", n);
            context__.validate_dims("data initialization", "TIME", "double", context__.to_vec(n));
            TIME = std::vector<double>(n, double(0));
            vals_r__ = context__.vals_r("TIME");
            pos__ = 0;
            size_t TIME_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < TIME_k_0_max__; ++k_0__) {
                TIME[k_0__] = vals_r__[pos__++];
            }
            size_t TIME_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < TIME_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "TIME[i_0__]", TIME[i_0__], 0);
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("EVENT", "n", n);
            context__.validate_dims("data initialization", "EVENT", "int", context__.to_vec(n));
            EVENT = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("EVENT");
            pos__ = 0;
            size_t EVENT_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < EVENT_k_0_max__; ++k_0__) {
                EVENT[k_0__] = vals_i__[pos__++];
            }
            size_t EVENT_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < EVENT_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "EVENT[i_0__]", EVENT[i_0__], 0);
                check_less_or_equal(function__, "EVENT[i_0__]", EVENT[i_0__], 1);
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("X", "n", n);
            validate_non_negative_index("X", "p", p);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(n,p));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, p);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = p;
            size_t X_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("X_trt", "nt", nt);
            validate_non_negative_index("X_trt", "p", p);
            context__.validate_dims("data initialization", "X_trt", "matrix_d", context__.to_vec(nt,p));
            X_trt = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nt, p);
            vals_r__ = context__.vals_r("X_trt");
            pos__ = 0;
            size_t X_trt_j_2_max__ = p;
            size_t X_trt_j_1_max__ = nt;
            for (size_t j_2__ = 0; j_2__ < X_trt_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_trt_j_1_max__; ++j_1__) {
                    X_trt(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("prior_delta", "p", p);
            validate_non_negative_index("prior_delta", "2", 2);
            context__.validate_dims("data initialization", "prior_delta", "matrix_d", context__.to_vec(p,2));
            prior_delta = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(p, 2);
            vals_r__ = context__.vals_r("prior_delta");
            pos__ = 0;
            size_t prior_delta_j_2_max__ = 2;
            size_t prior_delta_j_1_max__ = p;
            for (size_t j_2__ = 0; j_2__ < prior_delta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prior_delta_j_1_max__; ++j_1__) {
                    prior_delta(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 20;
            validate_non_negative_index("prior_0N", "2", 2);
            context__.validate_dims("data initialization", "prior_0N", "double", context__.to_vec(2));
            prior_0N = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("prior_0N");
            pos__ = 0;
            size_t prior_0N_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < prior_0N_k_0_max__; ++k_0__) {
                prior_0N[k_0__] = vals_r__[pos__++];
            }
            size_t prior_0N_i_0_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_0N_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "prior_0N[i_0__]", prior_0N[i_0__], 0);
            }
            current_statement_begin__ = 21;
            validate_non_negative_index("prior_1N", "2", 2);
            context__.validate_dims("data initialization", "prior_1N", "double", context__.to_vec(2));
            prior_1N = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("prior_1N");
            pos__ = 0;
            size_t prior_1N_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < prior_1N_k_0_max__; ++k_0__) {
                prior_1N[k_0__] = vals_r__[pos__++];
            }
            size_t prior_1N_i_0_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_1N_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "prior_1N[i_0__]", prior_1N[i_0__], 0);
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("prior_0T", "2", 2);
            context__.validate_dims("data initialization", "prior_0T", "double", context__.to_vec(2));
            prior_0T = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("prior_0T");
            pos__ = 0;
            size_t prior_0T_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < prior_0T_k_0_max__; ++k_0__) {
                prior_0T[k_0__] = vals_r__[pos__++];
            }
            size_t prior_0T_i_0_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_0T_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "prior_0T[i_0__]", prior_0T[i_0__], 0);
            }
            current_statement_begin__ = 23;
            validate_non_negative_index("prior_1T", "2", 2);
            context__.validate_dims("data initialization", "prior_1T", "double", context__.to_vec(2));
            prior_1T = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("prior_1T");
            pos__ = 0;
            size_t prior_1T_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < prior_1T_k_0_max__; ++k_0__) {
                prior_1T[k_0__] = vals_r__[pos__++];
            }
            size_t prior_1T_i_0_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < prior_1T_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "prior_1T[i_0__]", prior_1T[i_0__], 0);
            }
            current_statement_begin__ = 26;
            validate_non_negative_index("t_grid", "tg", tg);
            context__.validate_dims("data initialization", "t_grid", "vector_d", context__.to_vec(tg));
            t_grid = Eigen::Matrix<double, Eigen::Dynamic, 1>(tg);
            vals_r__ = context__.vals_r("t_grid");
            pos__ = 0;
            size_t t_grid_j_1_max__ = tg;
            for (size_t j_1__ = 0; j_1__ < t_grid_j_1_max__; ++j_1__) {
                t_grid(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 32;
            validate_non_negative_index("delta", "p", p);
            num_params_r__ += p;
            current_statement_begin__ = 33;
            num_params_r__ += 1;
            current_statement_begin__ = 34;
            num_params_r__ += 1;
            current_statement_begin__ = 35;
            num_params_r__ += 1;
            current_statement_begin__ = 36;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_m_exp_covar() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 32;
        if (!(context__.contains_r("delta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta");
        pos__ = 0U;
        validate_non_negative_index("delta", "p", p);
        context__.validate_dims("parameter initialization", "delta", "vector_d", context__.to_vec(p));
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta(p);
        size_t delta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            delta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(delta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 33;
        if (!(context__.contains_r("lambda_0N")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_0N missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_0N");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda_0N", "double", context__.to_vec());
        double lambda_0N(0);
        lambda_0N = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, lambda_0N);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_0N: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 34;
        if (!(context__.contains_r("lambda_1N")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_1N missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_1N");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda_1N", "double", context__.to_vec());
        double lambda_1N(0);
        lambda_1N = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, lambda_1N);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_1N: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("lambda_0T")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_0T missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_0T");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda_0T", "double", context__.to_vec());
        double lambda_0T(0);
        lambda_0T = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, lambda_0T);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_0T: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 36;
        if (!(context__.contains_r("lambda_1T")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_1T missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_1T");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda_1T", "double", context__.to_vec());
        double lambda_1T(0);
        lambda_1T = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, lambda_1T);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_1T: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 32;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta;
            (void) delta;  // dummy to suppress unused var warning
            if (jacobian__)
                delta = in__.vector_constrain(p, lp__);
            else
                delta = in__.vector_constrain(p);
            current_statement_begin__ = 33;
            local_scalar_t__ lambda_0N;
            (void) lambda_0N;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_0N = in__.scalar_lb_constrain(0, lp__);
            else
                lambda_0N = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 34;
            local_scalar_t__ lambda_1N;
            (void) lambda_1N;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_1N = in__.scalar_lb_constrain(0, lp__);
            else
                lambda_1N = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 35;
            local_scalar_t__ lambda_0T;
            (void) lambda_0T;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_0T = in__.scalar_lb_constrain(0, lp__);
            else
                lambda_0T = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 36;
            local_scalar_t__ lambda_1T;
            (void) lambda_1T;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_1T = in__.scalar_lb_constrain(0, lp__);
            else
                lambda_1T = in__.scalar_lb_constrain(0);
            // model body
            current_statement_begin__ = 43;
            for (int pp = 1; pp <= p; ++pp) {
                current_statement_begin__ = 43;
                lp_accum__.add(normal_log<propto__>(get_base1(delta, pp, "delta", 1), get_base1(prior_delta, pp, 1, "prior_delta", 1), get_base1(prior_delta, pp, 2, "prior_delta", 1)));
            }
            current_statement_begin__ = 44;
            lp_accum__.add(gamma_log<propto__>(lambda_0N, get_base1(prior_0N, 1, "prior_0N", 1), get_base1(prior_0N, 2, "prior_0N", 1)));
            current_statement_begin__ = 45;
            lp_accum__.add(gamma_log<propto__>(lambda_1N, get_base1(prior_1N, 1, "prior_1N", 1), get_base1(prior_1N, 2, "prior_1N", 1)));
            current_statement_begin__ = 46;
            lp_accum__.add(gamma_log<propto__>(lambda_0T, get_base1(prior_0T, 1, "prior_0T", 1), get_base1(prior_0T, 2, "prior_0T", 1)));
            current_statement_begin__ = 47;
            lp_accum__.add(gamma_log<propto__>(lambda_1T, get_base1(prior_1T, 1, "prior_1T", 1), get_base1(prior_1T, 2, "prior_1T", 1)));
            current_statement_begin__ = 50;
            lp_accum__.add(bernoulli_logit_log<propto__>(S_trt, multiply(X_trt, delta)));
            {
            current_statement_begin__ = 54;
            validate_non_negative_index("prob", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> prob(n);
            stan::math::initialize(prob, DUMMY_VAR__);
            stan::math::fill(prob, DUMMY_VAR__);
            current_statement_begin__ = 55;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 56;
                if (as_bool(logical_eq(get_base1(Z, i, "Z", 1), 0))) {
                    current_statement_begin__ = 58;
                    stan::model::assign(prob, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                log_mix(inv_logit(multiply(get_base1(X, i, "X", 1), delta)), ((get_base1(EVENT, i, "EVENT", 1) * stan::math::log(lambda_0T)) - (lambda_0T * get_base1(TIME, i, "TIME", 1))), ((get_base1(EVENT, i, "EVENT", 1) * stan::math::log(lambda_0N)) - (lambda_0N * get_base1(TIME, i, "TIME", 1)))), 
                                "assigning variable prob");
                } else if (as_bool((primitive_value(logical_eq(get_base1(Z, i, "Z", 1), 1)) && primitive_value(logical_eq(get_base1(S, i, "S", 1), 0))))) {
                    current_statement_begin__ = 63;
                    stan::model::assign(prob, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (log1m(inv_logit(multiply(get_base1(X, i, "X", 1), delta))) + ((get_base1(EVENT, i, "EVENT", 1) * stan::math::log(lambda_1N)) - (lambda_1N * get_base1(TIME, i, "TIME", 1)))), 
                                "assigning variable prob");
                } else if (as_bool((primitive_value(logical_eq(get_base1(Z, i, "Z", 1), 1)) && primitive_value(logical_eq(get_base1(S, i, "S", 1), 1))))) {
                    current_statement_begin__ = 66;
                    stan::model::assign(prob, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (stan::math::log(inv_logit(multiply(get_base1(X, i, "X", 1), delta))) + ((get_base1(EVENT, i, "EVENT", 1) * stan::math::log(lambda_1T)) - (lambda_1T * get_base1(TIME, i, "TIME", 1)))), 
                                "assigning variable prob");
                }
            }
            current_statement_begin__ = 69;
            lp_accum__.add(prob);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("delta");
        names__.push_back("lambda_0N");
        names__.push_back("lambda_1N");
        names__.push_back("lambda_0T");
        names__.push_back("lambda_1T");
        names__.push_back("hr_N");
        names__.push_back("hr_T");
        names__.push_back("rmst_N");
        names__.push_back("rmst_T");
        names__.push_back("S_0N");
        names__.push_back("S_1N");
        names__.push_back("S_0T");
        names__.push_back("S_1T");
        names__.push_back("rmst_0N");
        names__.push_back("rmst_1N");
        names__.push_back("rmst_0T");
        names__.push_back("rmst_1T");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(tg);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(tg);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(tg);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(tg);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_m_exp_covar_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta = in__.vector_constrain(p);
        size_t delta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            vars__.push_back(delta(j_1__));
        }
        double lambda_0N = in__.scalar_lb_constrain(0);
        vars__.push_back(lambda_0N);
        double lambda_1N = in__.scalar_lb_constrain(0);
        vars__.push_back(lambda_1N);
        double lambda_0T = in__.scalar_lb_constrain(0);
        vars__.push_back(lambda_0T);
        double lambda_1T = in__.scalar_lb_constrain(0);
        vars__.push_back(lambda_1T);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 76;
            double hr_N;
            (void) hr_N;  // dummy to suppress unused var warning
            stan::math::initialize(hr_N, DUMMY_VAR__);
            stan::math::fill(hr_N, DUMMY_VAR__);
            current_statement_begin__ = 77;
            double hr_T;
            (void) hr_T;  // dummy to suppress unused var warning
            stan::math::initialize(hr_T, DUMMY_VAR__);
            stan::math::fill(hr_T, DUMMY_VAR__);
            current_statement_begin__ = 78;
            double rmst_N;
            (void) rmst_N;  // dummy to suppress unused var warning
            stan::math::initialize(rmst_N, DUMMY_VAR__);
            stan::math::fill(rmst_N, DUMMY_VAR__);
            current_statement_begin__ = 79;
            double rmst_T;
            (void) rmst_T;  // dummy to suppress unused var warning
            stan::math::initialize(rmst_T, DUMMY_VAR__);
            stan::math::fill(rmst_T, DUMMY_VAR__);
            current_statement_begin__ = 81;
            validate_non_negative_index("S_0N", "tg", tg);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_0N(tg);
            stan::math::initialize(S_0N, DUMMY_VAR__);
            stan::math::fill(S_0N, DUMMY_VAR__);
            current_statement_begin__ = 82;
            validate_non_negative_index("S_1N", "tg", tg);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_1N(tg);
            stan::math::initialize(S_1N, DUMMY_VAR__);
            stan::math::fill(S_1N, DUMMY_VAR__);
            current_statement_begin__ = 83;
            validate_non_negative_index("S_0T", "tg", tg);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_0T(tg);
            stan::math::initialize(S_0T, DUMMY_VAR__);
            stan::math::fill(S_0T, DUMMY_VAR__);
            current_statement_begin__ = 84;
            validate_non_negative_index("S_1T", "tg", tg);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_1T(tg);
            stan::math::initialize(S_1T, DUMMY_VAR__);
            stan::math::fill(S_1T, DUMMY_VAR__);
            current_statement_begin__ = 85;
            double rmst_0N;
            (void) rmst_0N;  // dummy to suppress unused var warning
            stan::math::initialize(rmst_0N, DUMMY_VAR__);
            stan::math::fill(rmst_0N, DUMMY_VAR__);
            current_statement_begin__ = 86;
            double rmst_1N;
            (void) rmst_1N;  // dummy to suppress unused var warning
            stan::math::initialize(rmst_1N, DUMMY_VAR__);
            stan::math::fill(rmst_1N, DUMMY_VAR__);
            current_statement_begin__ = 87;
            double rmst_0T;
            (void) rmst_0T;  // dummy to suppress unused var warning
            stan::math::initialize(rmst_0T, DUMMY_VAR__);
            stan::math::fill(rmst_0T, DUMMY_VAR__);
            current_statement_begin__ = 88;
            double rmst_1T;
            (void) rmst_1T;  // dummy to suppress unused var warning
            stan::math::initialize(rmst_1T, DUMMY_VAR__);
            stan::math::fill(rmst_1T, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 91;
            stan::math::assign(hr_N, (lambda_1N / lambda_0N));
            current_statement_begin__ = 92;
            stan::math::assign(hr_T, (lambda_1T / lambda_0T));
            current_statement_begin__ = 95;
            for (int t = 1; t <= tg; ++t) {
                current_statement_begin__ = 96;
                stan::model::assign(S_0N, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (1 - exponential_cdf(get_base1(t_grid, t, "t_grid", 1), lambda_0N)), 
                            "assigning variable S_0N");
                current_statement_begin__ = 97;
                stan::model::assign(S_1N, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (1 - exponential_cdf(get_base1(t_grid, t, "t_grid", 1), lambda_1N)), 
                            "assigning variable S_1N");
                current_statement_begin__ = 98;
                stan::model::assign(S_0T, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (1 - exponential_cdf(get_base1(t_grid, t, "t_grid", 1), lambda_0T)), 
                            "assigning variable S_0T");
                current_statement_begin__ = 99;
                stan::model::assign(S_1T, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            (1 - exponential_cdf(get_base1(t_grid, t, "t_grid", 1), lambda_1T)), 
                            "assigning variable S_1T");
            }
            current_statement_begin__ = 101;
            stan::math::assign(rmst_0N, 0);
            current_statement_begin__ = 102;
            stan::math::assign(rmst_1N, 0);
            current_statement_begin__ = 103;
            stan::math::assign(rmst_0T, 0);
            current_statement_begin__ = 104;
            stan::math::assign(rmst_1T, 0);
            current_statement_begin__ = 105;
            for (int j = 2; j <= tg; ++j) {
                current_statement_begin__ = 106;
                stan::math::assign(rmst_0N, (rmst_0N + (((get_base1(S_0N, (j - 1), "S_0N", 1) + get_base1(S_0N, j, "S_0N", 1)) / 2) * (get_base1(t_grid, j, "t_grid", 1) - get_base1(t_grid, (j - 1), "t_grid", 1)))));
                current_statement_begin__ = 107;
                stan::math::assign(rmst_1N, (rmst_1N + (((get_base1(S_1N, (j - 1), "S_1N", 1) + get_base1(S_1N, j, "S_1N", 1)) / 2) * (get_base1(t_grid, j, "t_grid", 1) - get_base1(t_grid, (j - 1), "t_grid", 1)))));
                current_statement_begin__ = 108;
                stan::math::assign(rmst_0T, (rmst_0T + (((get_base1(S_0T, (j - 1), "S_0T", 1) + get_base1(S_0T, j, "S_0T", 1)) / 2) * (get_base1(t_grid, j, "t_grid", 1) - get_base1(t_grid, (j - 1), "t_grid", 1)))));
                current_statement_begin__ = 109;
                stan::math::assign(rmst_1T, (rmst_1T + (((get_base1(S_1T, (j - 1), "S_1T", 1) + get_base1(S_1T, j, "S_1T", 1)) / 2) * (get_base1(t_grid, j, "t_grid", 1) - get_base1(t_grid, (j - 1), "t_grid", 1)))));
            }
            current_statement_begin__ = 111;
            stan::math::assign(rmst_N, (rmst_1N - rmst_0N));
            current_statement_begin__ = 112;
            stan::math::assign(rmst_T, (rmst_1T - rmst_0T));
            // validate, write generated quantities
            current_statement_begin__ = 76;
            vars__.push_back(hr_N);
            current_statement_begin__ = 77;
            vars__.push_back(hr_T);
            current_statement_begin__ = 78;
            vars__.push_back(rmst_N);
            current_statement_begin__ = 79;
            vars__.push_back(rmst_T);
            current_statement_begin__ = 81;
            size_t S_0N_j_1_max__ = tg;
            for (size_t j_1__ = 0; j_1__ < S_0N_j_1_max__; ++j_1__) {
                vars__.push_back(S_0N(j_1__));
            }
            current_statement_begin__ = 82;
            size_t S_1N_j_1_max__ = tg;
            for (size_t j_1__ = 0; j_1__ < S_1N_j_1_max__; ++j_1__) {
                vars__.push_back(S_1N(j_1__));
            }
            current_statement_begin__ = 83;
            size_t S_0T_j_1_max__ = tg;
            for (size_t j_1__ = 0; j_1__ < S_0T_j_1_max__; ++j_1__) {
                vars__.push_back(S_0T(j_1__));
            }
            current_statement_begin__ = 84;
            size_t S_1T_j_1_max__ = tg;
            for (size_t j_1__ = 0; j_1__ < S_1T_j_1_max__; ++j_1__) {
                vars__.push_back(S_1T(j_1__));
            }
            current_statement_begin__ = 85;
            vars__.push_back(rmst_0N);
            current_statement_begin__ = 86;
            vars__.push_back(rmst_1N);
            current_statement_begin__ = 87;
            vars__.push_back(rmst_0T);
            current_statement_begin__ = 88;
            vars__.push_back(rmst_1T);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_m_exp_covar";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t delta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_0N";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_1N";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_0T";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_1T";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "hr_N";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "hr_T";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rmst_N";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rmst_T";
        param_names__.push_back(param_name_stream__.str());
        size_t S_0N_j_1_max__ = tg;
        for (size_t j_1__ = 0; j_1__ < S_0N_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_0N" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_1N_j_1_max__ = tg;
        for (size_t j_1__ = 0; j_1__ < S_1N_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_1N" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_0T_j_1_max__ = tg;
        for (size_t j_1__ = 0; j_1__ < S_0T_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_0T" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_1T_j_1_max__ = tg;
        for (size_t j_1__ = 0; j_1__ < S_1T_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_1T" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rmst_0N";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rmst_1N";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rmst_0T";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rmst_1T";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t delta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_0N";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_1N";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_0T";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_1T";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "hr_N";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "hr_T";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rmst_N";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rmst_T";
        param_names__.push_back(param_name_stream__.str());
        size_t S_0N_j_1_max__ = tg;
        for (size_t j_1__ = 0; j_1__ < S_0N_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_0N" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_1N_j_1_max__ = tg;
        for (size_t j_1__ = 0; j_1__ < S_1N_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_1N" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_0T_j_1_max__ = tg;
        for (size_t j_1__ = 0; j_1__ < S_0T_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_0T" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_1T_j_1_max__ = tg;
        for (size_t j_1__ = 0; j_1__ < S_1T_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_1T" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rmst_0N";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rmst_1N";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rmst_0T";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rmst_1T";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_m_exp_covar_namespace::model_m_exp_covar stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
