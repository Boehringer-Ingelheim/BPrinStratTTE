return(
tibble(
PAT_ID = stringr::str_pad(1:n, nchar(n), pad = "0"),
Z = Z,
X = X,
G = G,
S = S,
TIME = TIME,
EVENT = EVENT,
T0N = T0N,
T0T = T0T,
T1N = T1N,
T1T = T1T,
CENS_TIME = cens
)
)
}
d_params_covar <- list(
n = 1000,
nt = 500,
prob_X1 = 0.4,
prob_ice_X1 = 0.5,
prob_ice_X0 = 0.2,
fu_max = 48*7,
prop_cens = 0.15,
T0T_rate = 0.2,
T0N_rate = 0.2,
T1T_rate = 0.15,
T1N_rate = 0.1
)
dat_single_trial <- sim_dat_one_trial_exp_covar(
n = d_params_covar[["n"]],
nt = d_params_covar[["nt"]],
prob_X1 = d_params_covar[["prob_X1"]],
prob_ice_X1 = d_params_covar[["prob_ice_X1"]],
prob_ice_X0 = d_params_covar[["prob_ice_X0"]],
fu_max = d_params_covar[["fu_max"]],
prop_cens = d_params_covar[["prop_cens"]],
T0T_rate = d_params_covar[["T0T_rate"]],
T0N_rate = d_params_covar[["T0N_rate"]],
T1T_rate = d_params_covar[["T1T_rate"]],
T1N_rate = d_params_covar[["T1N_rate"]]
)
dim(dat_single_trial)
head(dat_single_trial)
48*7
d_params_covar <- list(
n = 1000,
nt = 500,
prob_X1 = 0.4,
prob_ice_X1 = 0.5,
prob_ice_X0 = 0.2,
fu_max = 336L,
prop_cens = 0.15,
T0T_rate = 0.2,
T0N_rate = 0.2,
T1T_rate = 0.15,
T1N_rate = 0.1
)
dat_mult_trials <- sim_dat_mult_trials_exp_covar(
n_iter = 3,
params = d_params_covar
)
lapply(dat_mult_trials, dim)
head(dat_mult_trials[[1]])
rm(list = ls())
document
document()
document()
document()
rm(list=ls())
document()
#'   fu_max = d_params_nocovar[["fu_max"]],
#'   prop_cens = d_params_nocovar[["prop_cens"]],
#'   T0T_rate = d_params_nocovar[["T0T_rate"]],
#'   T0N_rate = d_params_nocovar[["T0N_rate"]],
#'   T1T_rate = d_params_nocovar[["T1T_rate"]],
#'   T1N_rate = d_params_nocovar[["T1N_rate"]]
#' )
#' dim(dat_single_trial)
#' head(dat_single_trial)
#'
sim_dat_one_trial_exp_nocovar <- function(
n,             # number of patients
nt,            # number of treated patients
prob_ice,      # prob ICE
fu_max,        # maximum follow-up (days)
prop_cens,     # proportion of censored patients
T0T_rate,      # monthly event rate in controls TD
T0N_rate,      # monthly event rate in controls ND
T1T_rate,      # monthly event rate in treated TD
T1N_rate       # monthly event rate in treated ND
) {
# baseline data
Z  <- sample(c(rep(0L, n - nt), rep(1L, nt)))
# intercurrent event data
G <- sample(c(0L, 1L), size = n, prob = c(1 - prob_ice, prob_ice), replace = T)
S <- G
S[Z==0L] <- 0L
# censoring
n_cens <- n * prop_cens
pat_cens <- sample(x = 1:n, size = n_cens) |> sort()
unif_cens <- runif(n = length(pat_cens), min = 1, max = fu_max)
cens <- rep(fu_max, n)
cens[pat_cens] <- unif_cens
# time to event endpoint data by principal stratum
T0T <- rexp(n = n, rate = T0T_rate) * 30
T0N <- rexp(n = n, rate = T0N_rate) * 30
T1T <- rexp(n = n, rate = T1T_rate) * 30
T1N <- rexp(n = n, rate = T1N_rate) * 30
E0T <- as.integer(T0T <= cens)
E0N <- as.integer(T0N <= cens)
E1T <- as.integer(T1T <= cens)
E1N <- as.integer(T1N <= cens)
EVENT <- NULL
EVENT[Z==0 & G==0] <- E0N[Z==0 & G==0]
EVENT[Z==0 & G==1] <- E0T[Z==0 & G==1]
EVENT[Z==1 & G==0] <- E1N[Z==1 & G==0]
EVENT[Z==1 & G==1] <- E1T[Z==1 & G==1]
TIME <- NULL
TIME[EVENT==0] <- round(cens[EVENT==0])
TIME[EVENT==1 & Z==0 & G==0] <- round(T0N[EVENT==1 & Z==0 & G==0])
TIME[EVENT==1 & Z==0 & G==1] <- round(T0T[EVENT==1 & Z==0 & G==1])
TIME[EVENT==1 & Z==1 & G==0] <- round(T1N[EVENT==1 & Z==1 & G==0])
TIME[EVENT==1 & Z==1 & G==1] <- round(T1T[EVENT==1 & Z==1 & G==1])
TIME <- as.integer(TIME)
return(
tibble::tibble(
PAT_ID = stringr::str_pad(1:n, nchar(n), pad = "0"),
Z = Z,
G = G,
S = S,
TIME = TIME,
EVENT = EVENT,
T0N = T0N,
T0T = T0T,
T1N = T1N,
T1T = T1T,
CENS_TIME = cens
)
)
}
#'   fu_max = d_params_covar[["fu_max"]],
#'   prop_cens = d_params_covar[["prop_cens"]],
#'   T0T_rate = d_params_covar[["T0T_rate"]],
#'   T0N_rate = d_params_covar[["T0N_rate"]],
#'   T1T_rate = d_params_covar[["T1T_rate"]],
#'   T1N_rate = d_params_covar[["T1N_rate"]]
#' )
#' dim(dat_single_trial)
#' head(dat_single_trial)
#'
sim_dat_one_trial_exp_covar <- function(
n,             # number of patients
nt,            # number of treated patients
prob_X1,       # probability of X=1
prob_ice_X1,   # probability of intercurrent event for X=1
prob_ice_X0,   # probability of intercurrent event for X=0
fu_max,        # maximum follow-up (days)
prop_cens,     # proportion of censored patients
T0T_rate,      # monthly event rate in controls TD
T0N_rate,      # monthly event rate in controls ND
T1T_rate,      # monthly event rate in treated TD
T1N_rate       # monthly event rate in treated ND
) {
# baseline data
Z  <- sample(c(rep(0L, n - nt), rep(1L, nt)))
# binary covariate
X <- sample(c(0, 1), size = n,
prob = c(1 - prob_X1, prob_X1), replace = T)
n_X1 <- sum(X==1)
# intercurrent event data
G <- rep(NA, n)
G[X==1] <- sample(c(0,1), size = n_X1,
prob = c(1 - prob_ice_X1, prob_ice_X1), replace = T)
G[X==0] <- sample(c(0,1), size = n - n_X1,
prob = c(1 - prob_ice_X0, prob_ice_X0), replace = T)
S <- G
S[Z==0L] <- 0L
# censoring
n_cens <- n * prop_cens
pat_cens <- sample(x = 1:n, size = n_cens) |> sort()
unif_cens <- runif(n = length(pat_cens), min = 1, max = fu_max)
cens <- rep(fu_max, n)
cens[pat_cens] <- unif_cens
# time to event endpoint data by principal stratum
T0T <- rexp(n = n, rate = T0T_rate) * 30
T0N <- rexp(n = n, rate = T0N_rate) * 30
T1T <- rexp(n = n, rate = T1T_rate) * 30
T1N <- rexp(n = n, rate = T1N_rate) * 30
E0T <- as.integer(T0T <= cens)
E0N <- as.integer(T0N <= cens)
E1T <- as.integer(T1T <= cens)
E1N <- as.integer(T1N <= cens)
EVENT <- NULL
EVENT[Z==0 & G==0] <- E0N[Z==0 & G==0]
EVENT[Z==0 & G==1] <- E0T[Z==0 & G==1]
EVENT[Z==1 & G==0] <- E1N[Z==1 & G==0]
EVENT[Z==1 & G==1] <- E1T[Z==1 & G==1]
TIME <- NULL
TIME[EVENT==0] <- round(cens[EVENT==0])
TIME[EVENT==1 & Z==0 & G==0] <- round(T0N[EVENT==1 & Z==0 & G==0])
TIME[EVENT==1 & Z==0 & G==1] <- round(T0T[EVENT==1 & Z==0 & G==1])
TIME[EVENT==1 & Z==1 & G==0] <- round(T1N[EVENT==1 & Z==1 & G==0])
TIME[EVENT==1 & Z==1 & G==1] <- round(T1T[EVENT==1 & Z==1 & G==1])
TIME <- as.integer(TIME)
return(
tibble(
PAT_ID = stringr::str_pad(1:n, nchar(n), pad = "0"),
Z = Z,
X = X,
G = G,
S = S,
TIME = TIME,
EVENT = EVENT,
T0N = T0N,
T0T = T0T,
T1N = T1N,
T1T = T1T,
CENS_TIME = cens
)
)
}
#'   T1T_rate = 0.15,
#'   T1N_rate = 0.1
#'  )
#' dat_mult_trials <- sim_dat_mult_trials_exp_covar(
#'   n_iter = 3L,
#'   params = d_params_covar
#' )
#' lapply(dat_mult_trials, dim)
#' head(dat_mult_trials[[1]])
#'
sim_dat_mult_trials_exp_covar <- function(n_iter, params) {
replicate(
n_iter,
sim_dat_one_trial_exp_covar(
n           = params[["n"]],
nt          = params[["nt"]],
prob_X1     = params[["prob_X1"]],
prob_ice_X1 = params[["prob_ice_X1"]],
prob_ice_X0 = params[["prob_ice_X0"]],
fu_max      = params[["fu_max"]],
prop_cens   = params[["prop_cens"]],
T0T_rate    = params[["T0T_rate"]],
T0N_rate    = params[["T0N_rate"]],
T1T_rate    = params[["T1T_rate"]],
T1N_rate    = params[["T1N_rate"]]
),
simplify = FALSE
) %>%
lapply(FUN = function(x) x[!(names(x) %in% c("PAT_ID","T0N","T0T","T1N","T1T"))])
}
#'   T1T_rate = 0.15,
#'   T1N_rate = 0.1
#' )
#' dat_mult_trials <- sim_dat_mult_trials_exp_nocovar(
#'   n_iter = 3L,
#'   params = d_params_nocovar
#' )
#' lapply(dat_mult_trials, dim)
#' head(dat_mult_trials[[1]])
#'
sim_dat_mult_trials_exp_nocovar <- function(n_iter, params) {
replicate(
n_iter,
sim_dat_one_trial_exp_nocovar(
n = params[["n"]],
nt = params[["nt"]],
prob_ice = params[["prob_ice"]],
fu_max = params[["fu_max"]],
prop_cens   = params[["prop_cens"]],
T0T_rate = params[["T0T_rate"]],
T0N_rate = params[["T0N_rate"]],
T1T_rate = params[["T1T_rate"]],
T1N_rate = params[["T1N_rate"]]
),
simplify = FALSE
) %>%
lapply(FUN = function(x) x[!(names(x) %in% c("PAT_ID","T0N","T0T","T1N","T1T"))])
}
d_params_covar <- list(
n = 1000,
nt = 500,
prob_X1 = 0.4,
prob_ice_X1 = 0.5,
prob_ice_X0 = 0.2,
fu_max = 336L,
prop_cens = 0.15,
T0T_rate = 0.2,
T0N_rate = 0.2,
T1T_rate = 0.15,
T1N_rate = 0.1
)
dat_mult_trials <- sim_dat_mult_trials_exp_covar(
n_iter = 3L,
params = d_params_covar
)
lapply(dat_mult_trials, dim)
head(dat_mult_trials[[1]])
d_params_covar <- list(
n = 1000,
nt = 500,
prob_X1 = 0.4,
prob_ice_X1 = 0.5,
prob_ice_X0 = 0.2,
fu_max = 48*7,
prop_cens = 0.15,
T0T_rate = 0.2,
T0N_rate = 0.2,
T1T_rate = 0.15,
T1N_rate = 0.1
)
dat_single_trial <- sim_dat_one_trial_exp_covar(
n = d_params_covar[["n"]],
nt = d_params_covar[["nt"]],
prob_X1 = d_params_covar[["prob_X1"]],
prob_ice_X1 = d_params_covar[["prob_ice_X1"]],
prob_ice_X0 = d_params_covar[["prob_ice_X0"]],
fu_max = d_params_covar[["fu_max"]],
prop_cens = d_params_covar[["prop_cens"]],
T0T_rate = d_params_covar[["T0T_rate"]],
T0N_rate = d_params_covar[["T0N_rate"]],
T1T_rate = d_params_covar[["T1T_rate"]],
T1N_rate = d_params_covar[["T1N_rate"]]
)
dim(dat_single_trial)
dat_single_trial
document()
rm(list = c("sim_dat_mult_trials_exp_covar", "sim_dat_mult_trials_exp_nocovar", "sim_dat_one_trial_exp_covar",
"sim_dat_one_trial_exp_nocovar"))
document()
document()
document()
document()
build()
roxygen2::roxygenise()
use_rstan()
rstantools::use_rstan()
library(pkgbuild)
compile_dll(debug=FALSE)
devtools::load_all(".")
objects()
d_params_covar <- list(
n = 1000,
nt = 500,
prob_X1 = 0.4,
prob_ice_X1 = 0.5,
prob_ice_X0 = 0.2,
fu_max = 48*7,
T0T_rate = 0.2,
T0N_rate = 0.2,
T1T_rate = 0.15,
T1N_rate = 0.1
)
dat_single_trial <- sim_dat_one_trial_exp_covar(
n = d_params_covar[["n"]],
nt = d_params_covar[["nt"]],
prob_X1 = d_params_covar[["prob_X1"]],
prob_ice_X1 = d_params_covar[["prob_ice_X1"]],
prob_ice_X0 = d_params_covar[["prob_ice_X0"]],
fu_max = d_params_covar[["fu_max"]],
T0T_rate = d_params_covar[["T0T_rate"]],
T0N_rate = d_params_covar[["T0N_rate"]],
T1T_rate = d_params_covar[["T1T_rate"]],
T1N_rate = d_params_covar[["T1N_rate"]]
)
m_params_covar <- list(
tg = 48,
p = 2,
prior_delta = matrix(
c(0, 5, 0, 5),
nrow = 2, byrow = TRUE),
prior_0N = c(1.5, 5),
prior_1N = c(1.5, 5),
prior_0T = c(1.5, 5),
prior_1T = c(1.5, 5),
t_grid =  seq(7, 7 * 48, 7) / 30,
chains = 2,
n_iter = 3000,
warmup = 1500,
cores = 2,
open_progress = FALSE,
show_messages = FALSE
)
fit_single <- fit_single_exp_covar(
data = dat_single_trial,
params = m_params_covar,
summarize_fit = FALSE
)
try(roxygen2::roxygenize(load_code = rstantools_load_code), silent = TRUE)
roxygen2::roxygenize()
pkgbuild::compile_dll()
roxygen2::roxygenize()
getwd()
devtools::load_all(".")
roxygen2::roxygenize()
devtools::install(upgrade = FALSE)
library(BPrinStratTTE)
d_params_covar <- list(
n = 1000,
nt = 500,
prob_X1 = 0.4,
prob_ice_X1 = 0.5,
prob_ice_X0 = 0.2,
fu_max = 48*7,
T0T_rate = 0.2,
T0N_rate = 0.2,
T1T_rate = 0.15,
T1N_rate = 0.1
)
dat_single_trial <- sim_dat_one_trial_exp_covar(
n = d_params_covar[["n"]],
nt = d_params_covar[["nt"]],
prob_X1 = d_params_covar[["prob_X1"]],
prob_ice_X1 = d_params_covar[["prob_ice_X1"]],
prob_ice_X0 = d_params_covar[["prob_ice_X0"]],
fu_max = d_params_covar[["fu_max"]],
T0T_rate = d_params_covar[["T0T_rate"]],
T0N_rate = d_params_covar[["T0N_rate"]],
T1T_rate = d_params_covar[["T1T_rate"]],
T1N_rate = d_params_covar[["T1N_rate"]]
)
m_params_covar <- list(
tg = 48,
p = 2,
prior_delta = matrix(
c(0, 5, 0, 5),
nrow = 2, byrow = TRUE),
prior_0N = c(1.5, 5),
prior_1N = c(1.5, 5),
prior_0T = c(1.5, 5),
prior_1T = c(1.5, 5),
t_grid =  seq(7, 7 * 48, 7) / 30,
chains = 2,
n_iter = 3000,
warmup = 1500,
cores = 2,
open_progress = FALSE,
show_messages = FALSE
)
fit_single <- fit_single_exp_covar(
data = dat_single_trial,
params = m_params_covar,
summarize_fit = FALSE
)
.libPaths()
library(spelling)
spell_check_package()
release()
check_rhub()
check_rhub(pkg = "BPrinStratTTE")
getwd()
setwd("C:/RProgs/)
)
2
1ee
)))
))))
%
-
q
q()
????
""
"
getwd()
setwd("C:/RProgs/")
check_rhub(pkg = "BPrinStratTTE")
devtools::load_all(".")
library(devtools)
rhub::rhub_check()
rhub_check()
rhub::rhub_check()
library(rhub)
rhub_check()
check()
rhub_check()
install.packages("rhub")
rhub_check()
rhub::rhub_check()
.Last.error
devtools::check_rhub()
?rhubv2
devtools::load_all(".")
rhub::rhub_check()
getwd()
rhub::rhub_check(gh_url = "https://github.com/Boehringer-Ingelheim/BPrinStratTTE/tree/main", platforms = c("1","2","3","4") )
rhub::rhub_check(gh_url = "https://github.com/Boehringer-Ingelheim/BPrinStratTTE/tree/main", platforms = c("linux","windows","macos") )
rhub::rhub_check(gh_url = "https://github.com/Boehringer-Ingelheim/BPrinStratTTE/", platforms = c("1","2","3","4") )
rhub::rhub_check(gh_url = "https://github.com/Boehringer-Ingelheim/BPrinStratTTE/", platforms = c("linux","windows","macos" )
)
rhub::rhub_check(gh_url = "https://github.com/Boehringer-Ingelheim/BPrinStratTTE/", platforms = c("linux"))
rhub::rhub_check(gh_url = "https://github.com/Boehringer-Ingelheim/BPrinStratTTE/", platforms = NULL)
build()
devtools::build()
usethis::use_cran_comments()
release()
devtools::release()
check_win_devel()
devtools::check_win_devel()
devtools::load_all(".")
library(devtools)
library(roxygen2)
roxygenise()
release()
pkgbuild::compile_dll(debug=FALSE)
library(BPrinStratTTE)
library(usethis)
use_cran_comments()
roxygenise()
release()
